#!/bin/bash

usage() {
  cat <<EOF
$(b NAME)
      zerkenv - manage environment variables

$(b SYNOPSIS)
      $(b zerkenv) [$(b -hlRr)]
      $(b zerkenv -c) [$(i arg)...]
      $(b zerkenv -i) $(i shell) [$(i name)]
      $(b zerkenv -w) $(i module)
      $(b zerkenv -W) $(i module)
      $(b zerkenv -u) [$(i module)...]
      $(b zerkenv) [$(b -dxX)] $(i module) [$(i module)...]

$(b DESCRIPTION)
      Without arguments lists currently loaded modules, one per line. With arg-
      uments lists, uploads,  or fetches environment configuration modules from
      the local repo specified in the $(b ZERKENV_DIR) environment variable (default
      location ~/.zerkenv) or the S3 bucket specified in the $(b ZERKENV_BUCKET) en-
      vironment variable.  Downloaded  modules are cached in the local repo and
      written to stdout, suitable for evaluation in a shell.

      There are three types of modules:

          · $(b Shared)  —  may be stored in S3
          · $(b Private) —  only stored in the local cache
          · $(b Assumed) —  temporary assumed role credentials

      Private module names start with the $(b @) character. Private modules are used
      to store user credentials (eg. the credentials used to access the zerkenv
      bucket itself).

      Assumed module names are of the form $(b %)$(i name) — the $(b %) character  followed by
      the role's name.

$(b OPTIONS)
      $(b -c) $(i arg)...
            Print completion words (used for shell tab-completion).

      $(b -d) $(i module)...
            Print contents of $(i module)s, resolving dependencies.

      $(b -h)    Show this help message and exit.

      $(b -i bash) [$(i name)], $(b -i fish) [$(i name)]
            Print startup snippet suitable for shell rc file. The optional $(i name)
            argument may be given to specify the name of the zerkload function.

      $(b -l)    List modules available in the local cache directory.

      $(b -R)    List roles available for STS assume-role.

      $(b -r)    List modules available in S3.

      $(b -u) [$(i module)...]
            Update $(i module)s (or all) in local cache.

      $(b -w) $(i module)
            Read source from stdin and write to local $(i module).

      $(b -W) $(i module)
            Upload $(i module) from the local repo to S3.

      $(b -x) $(i module)...
            Delete $(i module)s from local repo.

      $(b -X) $(i module)...
            Delete $(i module)s from S3.

$(b SETUP)
      First, download the zerkenv script to a directory on your $(b PATH).  Also en-
      sure that the following programs are available:

          · $(b aws)(1) —  the AWS command line tool
          · $(b gpg)(1) —  the GNU Pretty Good Privacy encryption tool

      Then, follow the instructions for your shell below.

   $(b Bash)
      Add the following to your ~/.bashrc file:

            export ZERKENV_BUCKET=my-modules    # your S3 bucket name
            export ZERKENV_REGION=us-east-1     # the AWS region of the bucket
            export ZERKENV_DIR=\$HOME/.zerkenv   # optional
            . <(zerkenv -i bash)                # creates the zerkload function

   $(b Fish)
      Zerkenv modules are bash snippets, so you must have $(b bass)(1) installed for
      it to work with the Fish shell.

      Then, add the following to your ~/.config/fish/config.fish file:

            set -gx ZERKENV_BUCKET my-modules   # your s3 bucket name
            set -gx ZERKENV_REGION us-east-1    # the AWS region of the bucket
            set -gx ZERKENV_DIR \$HOME/.zerkenv  # optional
            . (zerkenv -i fish | psub)          # creates the zerkload function

$(b MODULES)
      Modules are bash script snippets. These snippets normally export environ-
      ment variables. A typical module may look something like this:

            export FOO_USER=admin
            export FOO_PASS=s3cr3t

      Modules may contain any valid bash script,  but keep in mind that modules
      may be evaluated multiple times in subshells (see $(b Dependencies) below), so
      special care must be taken when a module produces side-effects.

   $(b Dependencies)
      Modules may declare dependencies on other modules, allowing one to set up
      environments. The special $(b ZERKENV_DEPENDENCIES) variable declares a set of
      dependencies:

            ZERKENV_DEPENDENCIES='bar baz'
            export FOO_USER=admin
            export FOO_PASS=s3cr3t

      Modules are loaded in dependency order so a module may refer to variables
      defined in the modules it depends on. For example:

            ZERKENV_DEPENDENCIES='bar baz'
            export FOO_USER=\${BAR_USER:-admin}
            export FOO_PASS=\${BAR_PASS:-s3cr3t}

   $(b Cycles)
      Dependencies may have dependencies of their own, and so on, provided that
      the dependency graph does not contain cycles. If a cycle is encountered a
      warning is printed to stderr and an arbitrary dependency order is chosen.

   $(b Side-effects)
      Zerkenv resolves dependencies by sourcing modules in subshells to extract
      the value of any $(b ZERKENV_DEPENDENCIES) variables set in the modules.  This
      means that side-effects may be performed multiple times — first at depen-
      dency resolution time in a subshell, then again when the module is loaded
      into the current shell.

      An example of a problematic side-effect is one where some global state is
      modified, like $(b ssh-agent)(1) setup:

            export FOO_USER=admin
            export FOO_PASS=s3cr3t
            ssh-add ~/.ssh/id_rsa

      When the above module is loaded $(b ssh-add)(1) is invoked multiple times. You
      may prevent a section  from being evaluated  during dependency resolution
      by adding a check for the special $(b ZERKENV_RESOLVING_DEPENDENCIES) environ-
      ment variable,  which is set only during the dependency resolution phase.

            export FOO_USER=admin
            export FOO_PASS=s3cr3t
            if [ -z "\$ZERKENV_RESOLVING_DEPENDENCIES" ]; then
              ssh-add ~/.ssh/id_rsa
            fi

      Note that side-effects like $(b 'FOO_COUNT=$((BAR_COUNT++))') aren't problematic
      in this way because dependencies are evaluated in subshells which can not
      affect the current shell.

$(b EXAMPLES)
      Here are some examples of how to use zerkenv to manage your environment:

            # list modules loaded in the current shell environment
            zerkenv

            # list modules available in the local cache
            zerkenv -l

            # list modules available in S3
            zerkenv -r

            # print the contents of modules foo, bar, and baz
            zerkenv foo bar baz

            # print the contents of modules foo, bar, baz, plus dependencies
            zerkenv -d foo bar baz

            # load modules foo, bar, and baz into current shell (bash)
            . <(zerkenv -d foo bar baz)

            # assume role foo and load credentials into current shell (bash)
            . <(zerkenv -u %foo)

            # write module to local cache as mod1, depending on dep1 and dep2
            cat <<EOT | zerkenv -w mod1
            ZERKENV_DEPENDENCIES='dep1 dep2'
            export USERNAME=admin
            export PASSWORD=s3cr3t
            EOT

            # update all modules in the local cache from files in S3
            zerkenv -u

            # update just the foo and bar modules
            zerkenv -u foo bar

            # delete the foo and bar modules from the local cache
            zerkenv -x foo bar

            # delete the foo and bar modules from S3
            zerkenv -X foo bar

$(b ENVIRONMENT)
      The following environment variables affect how zerkenv operates:

      $(b ZERKENV_DIR)
            Specifies the local cache directory. Zerkenv will attempt to create
            this directory if it does not exist. The default local cache direc-
            tory is ~/.zerkenv.  This is the only environment variable that can
            not be loaded from a local zerkenv module.

      $(b ZERKENV_BUCKET)
            Specifies the S3 bucket where shared modules are to be stored. This
            variable must be set for zerkenv to be able to upload/download mod-
            ules from S3 (obviously). This variable may be loaded from a module
            in your local zerkenv cache (to facilitate using multiple S3 module
            repositories).

      $(b ZERKENV_REGION)
            Specifies the AWS region of the $(b ZERKENV_BUCKET).  This variable must
            be set for zerkenv to be able to use modules from S3. This variable
            may be loaded from a module in your local zerkenv cache.

      $(b AWS_ACCESS_KEY_ID),
      $(b AWS_SECRET_ACCESS_KEY)
            These variables are used by the $(b aws)(1) tool for authentication. You
            may load these variables from a module in your local zerkenv cache.

$(b EXIT STATUS)
      Zerkenv exits with a zero status on success, nonzero on error.
EOF
}

## helpers ####################################################################

# Save the name of this script, so it can refer to itself correctly even if the
# user renamed it to something else when they installed it.
export prog=$(basename "${BASH_SOURCE[0]}")

# Don't print ANSI color escapes, etc. if stdout isn't a terminal.
([ -t 1 ] || [ "$colors" = true ]) && colors=true || colors=false
export colors

with_err()    { >&2 "$@" ; }
abort()       { [ $# -gt 0 ] && with_err echo ${BASH_SOURCE[0]}: "$@"; exit 1; }
assert()      { local msg=$1; shift; if ! "$@" >/dev/null 2>&1; then abort "$msg"; fi; }

assert_var()  { for i in "$@"; do assert "$i environment variable must be set" [ -n "${!i}" ]; done; }
assert_bin()  { for i in "$@"; do assert "required tool '$i' not found on PATH" which "$i"; done; }

assert_gpg()  { assert_bin gpg; }
assert_s3()   { assert_bin aws; assert_var ZERKENV_BUCKET ZERKENV_REGION; }

with_rst()    { "$@"; $colors && echo -ne "\033[0m"; }
with_col()    { $colors && echo -ne "\033[${1}m"; shift; "$@"; }

with_bold()   { with_col 1 with_rst "$@"; }
with_ul()     { with_col 4 with_rst "$@"; }
with_yellow() { with_col 33 with_rst "$@"; }

b()           { with_bold echo -n "$@"; }
i()           { with_ul echo -n "$@"; }

info()        { with_err with_bold echo "$@"; }
warn()        { with_err with_bold with_yellow echo "$@"; }

#export -f with_err abort assert assert_s3 assert_gpg

## global and environment variables ###########################################

export ZERKENV_DIR=${ZERKENV_DIR:-$HOME/.zerkenv} # The local cache directory.

# Fetching of modules from S3 is done in batches in subshells, so it is not
# convenient to try to pass failures back via exit status, and subshells can't
# send information to the parent process via environment variables, so we re-
# cord individual failures in this file, created by the parent process. Child
# processes get the filename from the environment variable they inherit from
# the parent and record individual S3 read failures in it. This prevents the
# user from seeing multiple failed attempts to read modules from S3.
if [ -z "$ZERKENV_FAILS" ]; then
  mkdir -p "$ZERKENV_DIR"
  assert "can't create local cache directory: $ZERKENV_DIR" [ -d "$ZERKENV_DIR" ]
  export ZERKENV_FAILS="$ZERKENV_DIR/$$.tmp"
  touch "$ZERKENV_FAILS"
  trap "rm -f '$ZERKENV_FAILS'" EXIT
fi

## module operations ##########################################################

ls_s3() {
  assert_s3
  aws s3api list-objects --bucket $ZERKENV_BUCKET --output text \
    |awk -F\\t '$1 == "CONTENTS" {print $3}' \
    |grep '\.sh$' \
    |sed 's@\.sh$@@' \
    |sort
}

ls_roles() {
  aws iam list-roles |jt Roles [ RoleName % ] |sort |sed 's/^/%/'
}

ls_cache() {
  find "$ZERKENV_DIR" -type f -name '*.sh.asc' \
    |sed "s@^$ZERKENV_DIR/@@" \
    |sed 's@\.sh\.asc$@@'
}

ls_loaded()   { echo "$ZERKENV_MODULES" |grep . |sort -u ; }
cache_file()  { echo "$ZERKENV_DIR/$1.sh.asc" ; }
s3_file()     { echo "s3://$ZERKENV_BUCKET/$1.sh" ; }
encrypt()     { assert_gpg; gpg --batch -q -a -e --default-recipient-self ; }
decrypt()     { assert_gpg; gpg --batch -q -d ; }
not_private() { if ! [ ${1:0:1} = @ ]; then true; else false; fi ; }
is_cached()   { [ -f "$(cache_file $1)" ] ; }

put_cache() {
  local file="$(cache_file $1)"
  local src=$(cat)
  if [ -n "$src" ]; then
    mkdir -p "$(dirname "$file")"
    echo "$src" |encrypt > $file
  fi
}

get_cache() {
  local file="$(cache_file $1)"
  [ -f "$file" ] && cat "$file" |decrypt
}

get_s3() {
  local src role
  if [ "${1:0:1}" = % ]; then
    role=$(aws iam get-role --role-name "${1:1}" \
      |jt Role [ Arn % ] [ MaxSessionDuration % ] \
      |awk -F\\t '{print "--role-arn " $1 " --duration-seconds " $2}')
    if [ -n "$role" ]; then
      src=$(aws sts assume-role $role --role-session-name $USER \
        |jt Credentials [ AccessKeyId % ] [ SecretAccessKey % ] [ SessionToken % ] \
        |awk -F\\t '{print "export AWS_ACCESS_KEY_ID=" $1 " AWS_SECRET_ACCESS_KEY=" $2 " AWS_SESSION_TOKEN=" $3}')
    fi
  else
    assert_s3
    if not_private $1; then
      src=$(aws s3 cp "$(s3_file $1)" - --region $ZERKENV_REGION)
    else
      return
    fi
  fi
  if [ -n "$src" ]; then
    echo "$src" |put_cache $1
  else
    echo $1 >> "$ZERKENV_FAILS"
  fi
}

put_s3() {
  local file src
  assert_s3
  if not_private $1; then
    src="$(get_cache $1)"
    if [ -n "$src" ]; then
      echo "$src" |aws s3 cp - "$(s3_file $1)" --region $ZERKENV_REGION > /dev/null
    else
      warn "* $1 not found"
    fi
  elif [ ${1:0:1} = % ]; then
    warn "* $1 is an assumed role so cannot be uploaded to S3"
    abort
  else
    warn "* $1 is private so cannot be uploaded to S3"
    abort
  fi
}

get_cache_or_s3() {
  local i ff=$ZERKENV_FAILS
  local failed=$(sort <(echo $1) <(cat "$ff" |sort -u) |uniq -d)
  is_cached $1 || [ -n "$failed" ] || get_s3 $1
  get_cache $1
}

update_cache() {
  local module found modules="$@" local_modules=$(ls_cache)
  local remote_modules=$(ls_s3) roles=$(ls_roles)
  if [ $# -eq 0 ]; then
    modules=$(sort <(echo "$remote_modules") <(echo "$local_modules") |uniq -d)
  fi
  for module in $modules; do
    found=$(sort <(echo "$module") <(echo "$remote_modules") <(echo "$roles") \
      |uniq -d)
    if ! not_private $module; then
      warn "* $module is private so cannot be updated from S3"
    elif [ -n "$found" ]; then
      info "* $module"
      get_s3 $module
    else
      warn "* $module not found"
    fi
  done
}

rm_cache() {
  local module file
  for module in "$@"; do
    file=$(cache_file $module)
    if [ -f "$file" ]; then
      info "* $module"
      rm -f "$file"
    else
      warn "* $module not found"
    fi
  done
}

rm_s3() {
  local module file
  assert_s3
  for module in "$@"; do
    file=$(s3_file $module)
    if aws s3 rm "$file" --region $ZERKENV_REGION; then
      info "* $module"
    else
      warn "* $module not deleted"
    fi
  done
}

resolve_dependencies_impl() {
  local deps module ZERKENV_DEPENDENCIES

  for module in "$@"; do
    . <(get_cache_or_s3 $module)
    for dep in $module $ZERKENV_DEPENDENCIES; do
      deps="$deps $dep $module"
    done
    ZERKENV_DEPENDENCIES=
  done

  echo "$deps" |tsort
}

resolve_dependencies() {
  local i deps prev=$(for i in "$@"; do echo $i; done)

  export ZERKENV_RESOLVING_DEPENDENCIES=true
  while true; do
    deps=$(resolve_dependencies_impl $prev)
    [ "$deps" = "$prev" ] && break
    prev=$deps
  done
  unset ZERKENV_RESOLVING_DEPENDENCIES

  echo "$deps"
}

print_completions() {
  if [ $# -lt 3 ]; then
    echo "-d -h -i -l -r -u -w -W -x -X $($0 -l)"
  elif [ $# -lt 4 ]; then
    case $2 in
      -i) echo 'bash fish' ;;
      -u) $0 -l |grep -v '^@' ;;
      -h|-l|-r) ;;
      *) $0 -l ;;
    esac
  else
    case $2 in
      -h|-i|-l|-r|-w|-W) ;;
      -u) $0 -l |grep -v '^@' ;;
      *) $0 -l ;;
    esac
  fi
  exit
}

## configuration hooks ########################################################

install_bash() {
  local name=${1:-zerkload}
  export name
  cat <<'EOT' |envsubst '$prog $name'
$name() {
  local OPTIND OPTARG o newshell=false
  while getopts "hn" o; do
    case "${o}" in
      h) echo "USAGE: $name [-hn] <module>..." ; return ;;
      n) newshell=true ;;
      ?) return 1 ;;
    esac
  done
  shift $((OPTIND-1))
  [ $# -eq 0 ] && return
  if $newshell; then
    eval "( $name $* ; exec $BASH )"
  else
    . <(colors=true $prog -d "$@")
  fi
}
_$prog() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  local ses=$($prog -c "${COMP_WORDS[@]}")
  COMPREPLY=( $(compgen -W "$ses" -- $cur) )
}
_$name() {
  COMPREPLY=( $(compgen -W "-h -n $($prog -l)" -- ${COMP_WORDS[COMP_CWORD]}) )
}
complete -F _$prog $prog
complete -F _$name $name
EOT
}

# TODO: implement completions in fish
install_fish() {
  local name=${1:-zerkload}
  export name
  cat <<'EOT' |envsubst '$prog $name'
  function $name
    if test (count $argv) -eq 0; or test $argv[1] = '-h'
      echo "USAGE: $name [-h] <module> ..."
    else
      bass . ($prog -d $argv | psub)
    end
  end
EOT
}

install() {
  case $1 in
    bash) install_bash $2 ;;
    fish) install_fish $2 ;;
    *) abort unsupported shell: $1 ;;
  esac
}

## main #######################################################################

opt_completions=false
opt_resolve_deps=false
opt_update_cache=false
opt_delete_cache=false
opt_delete_s3=false

while getopts "cdhi:lRruw:W:x:X:" o; do
  case "${o}" in
    c) opt_completions=true ; break ;;
    d) opt_resolve_deps=true ; break ;;
    h) usage |less -r; exit ;;
    i) install $OPTARG ${!OPTIND}; exit $? ;;
    l) ls_cache ; exit $? ;;
    r) ls_s3 ; exit $? ;;
    R) ls_roles ; exit $? ;;
    u) opt_update_cache=true ; break ;;
    w) put_cache $OPTARG ; exit $? ;;
    W) put_s3 $OPTARG ; exit $? ;;
    x) opt_delete_cache=true ; : $((OPTIND--)) ; break ;;
    X) opt_delete_s3=true ; : $((OPTIND--)) ; break ;;
    ?) exit 1 ;;
  esac
done
shift $((OPTIND-1))

if $opt_completions; then
  print_completions "$@"
elif $opt_update_cache; then
  update_cache "$@"
elif $opt_delete_cache; then
  rm_cache "$@"
elif $opt_delete_s3; then
  rm_s3 "$@"
elif ! $opt_resolve_deps && [ $# -eq 0 ]; then
  ls_loaded
elif [ $# -gt 0 ]; then
  modules=$(for i in "$@"; do echo $i; done |sort -u)

  if $opt_resolve_deps; then
    modules=$(resolve_dependencies $modules)
  fi

  if [ -n "$modules" ]; then
    for module in $modules; do
      src=$(get_cache_or_s3 $module)
      if [ -n "$src" ]; then
        info "* $module"
        echo "$src"
      else
        failed="$failed $module"
        warn "* $module not found"
      fi
    done
    if $opt_resolve_deps; then
      failed=$(for i in $failed; do echo $i; done)
      deduped=$(sort -u <(echo "$modules") <(echo "$ZERKENV_MODULES"))
      nofails=$(sort <(echo "$deduped") <(echo "$failed") <(echo "$failed") |uniq -u)
      printf 'export ZERKENV_MODULES="%s"\n' "$nofails"
    fi
  fi
fi
